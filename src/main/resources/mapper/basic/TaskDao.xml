<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="TaskDao">
	<select id="findActivity" parameterType="String" resultType="com.biz.model.Pmodel.task.PmebActivity">
		SELECT * from base_mebactivity where isdel=0 and isOpen=1 and state=1 and lotteryTime=#{time}
	</select>
	<update id="updateIsOpen" parameterType="com.biz.model.Pmodel.task.PmebActivity">
		UPDATE base_mebapply set isOpen=1 where activityId=#{id}
	</update>

	<update id="updateIsGet" parameterType="com.biz.model.Pmodel.task.PmebActivity">
		UPDATE base_mebapply
		SET isGet = 1
		WHERE
		id IN (
		select z.id from(SELECT
		id
		FROM
		base_mebapply
		WHERE
		activityId =#{id}
		ORDER BY
		RAND()
		LIMIT 0,${count})as z
		)
	</update>

	<update id="updateNowState" parameterType="String">
UPDATE base_mebactivity set state=2 where lotteryTime=#{time} and isdel=0
	</update>
	<update id="updateNextState" parameterType="String">
UPDATE base_mebactivity
SET state = 1
WHERE
	id = (SELECT z.id from
		(SELECT
			id
		FROM
			base_mebactivity
		WHERE
			lotteryTime > #{time}
		AND isdel = 0
ORDER BY lotteryTime
LIMIT 1)as z
	)
</update>

	<select id="find90Detail" parameterType="String" resultType="com.biz.model.Pmodel.task.Pbase90Detail">
		SELECT * from base_90_detail where expireTime &lt;  date_format(now(), '%y-%m-%d %H:%i:%s') and point90Now>0 and isdel=0 and `inOut`=1 and state=0
	</select>

	<update id="update90Detail" parameterType="String">
		UPDATE base_90_detail set state=1 where id=#{_parameter}
	</update>

	<update id="updateBaseUser" parameterType="com.biz.model.Pmodel.task.Pbase90Detail">
		UPDATE base_user set balance_90=balance_90-#{point90Now} where open_id=#{openId}
	</update>

	<!-- 保存 -->
	<insert id="insertBase90Detail" parameterType="java.util.Map">
		insert into base_90_detail (sourceId,source,sourceMsg,`inOut`,point90,point90Now,state)
		VALUES
		<foreach collection="list" close="" index="index" item="item" open="" separator=",">
			(#{item.sourceId},#{item.source},#{item.sourceMsg},#{item.inOut},#{item.point90},#{item.point90Now},#{item.state})
		</foreach>
	</insert>

	<select id="findOrderList" resultType="java.util.Map">
		SELECT
		a.id AS detailId,
		b.id AS orderId,
		a.state AS state,
		b.state AS paystate,
		a.price AS price,
		a.count AS count,
		b.code AS code,
		a.payTotal AS detailPayTotal,
		b.freightTotal AS detailfreightTotal,
		b.payCoupon as payCoupon,
		b.giftCoupon as giftCoupon,
		a.goodsTotal,
		b.payTotal AS payTotal,
		a.goodsType,
		b.isClosed,
		a.isPayCoupons,
		a.coinPayTotal,
		c.open_id
		FROM
		order_detail a
		LEFT JOIN order_main b ON b.id = a.orderId
		LEFT JOIN base_user c on c.id=b.buyUserId
		where  a.isdel = 0
		AND b.isdel = 0
		and b.source=0
		and a.state=0
		and b.isClosed=0
		and a.createTime &lt;(select SUBDATE(now(),interval 3600 second))
		GROUP BY a.id
		ORDER BY b.isClosed asc,b.createTime DESC
	</select>

	<!-- 线上仓加库存-->
	<select id="getHistoryListUpStock" parameterType="java.util.HashMap" resultType="com.biz.model.Pmodel.basic.PwxGoodsStockHistory">
		SELECT
		a.id as relateCode,
		b.skuId as stockId,
		a.count AS changeNumber,
		'' AS whareHouseId,
		11 AS state,
		#{cityId} AS city
		FROM
		order_detail a
		left join base_wxgoods_stock b on b.id = a.stockId
		left join base_wxgoods w on w.id=b.goodsId
		WHERE
		a.id = #{detailId}
		AND a.isdel = 0
		and w.isTicket =#{isTicket}
	</select>

	<select id="getCountForCoupons" parameterType="String" resultType="java.util.HashMap">
		select a.id,b.venderId,a.couponsPayTotal from order_detail a
		left join base_wxgoods b on a.goodsId = b.id
		where a.isdel = 0
		and a.isPayCoupons = 1
		and a.id=#{detailId}
	</select>

	<update id="doCancelOrder" parameterType="String">
		update order_detail set isdel=1
		where id=#{detailId}
	</update>

	<update id="updateGoodsSales" parameterType="String">
		UPDATE base_wxgoods a
		SET a.sales = a.sales - 1
		WHERE
		a.sales > 0
		AND a.id = (
		SELECT
		goodsId
		FROM
		order_detail
		WHERE
		id = #{detailId}
		)
	</update>

	<update id="updateGoodsStock" parameterType="String">
		UPDATE base_wxgoods_stock set stock=stock+1,stockNow=stockNow+1
where goodsId=(SELECT goodsId from order_detail where id=#{detailId})
	</update>

	<select id="findServerList" parameterType="String" resultType="com.biz.model.Pmodel.task.PbaseServer">
		select id,name,url from  base_server where isdel=0
	</select>

	<select id="getConfirmOrder" resultType="java.util.Map">
		SELECT
		a.*, b.sendTime
		FROM
		order_detail a
		LEFT JOIN order_send b ON a.orderId = b.orderid
		WHERE
		a.state = 2
		AND a.isdel = 0
		AND b.isdel = 0
		AND b.sendTime &lt;=(
		SELECT
		DATE_SUB(now(), INTERVAL 15 DAY)
		)
	</select>

	<update id="updateOrderState" parameterType="String">
		UPDATE order_detail set state=4 where id=#{_parameter}
	</update>

	<select id="findCustomerList" parameterType="String" resultType="java.util.Map">
		SELECT
		a.id AS mainId,
		b.id AS detailId,
		r.id as refundId,
		a.paymentRoute,
		r.remarks,r.createTime,r.state
		FROM
		order_main a
		LEFT JOIN  order_detail b ON b.orderId = a.id
		and b.isdel=0
		left join t_order_refund r on r.orderId=b.id
		and r.isdel=0
		INNER JOIN base_user d
		ON d.id = a.buyUserId and d.isdel=0
		where
		r.id is not null
		and a.isdel=0
		and r.state=1
		and r.createTime &lt;=(SELECT DATE_SUB(now(), INTERVAL 7 DAY))
		GROUP BY b.id
		ORDER BY a.createTime DESC
	</select>

	<select id="findRefundInfoById" parameterType="String" resultType="java.util.HashMap">
		SELECT
		d.id,
		d.transaction_id,
		d.payTotal,
		g.venderId,
		u.open_id,
		u.id as userId,
		d.goodsTotal as balance_90,
		d.payTotal,
		d.goodsType,
		d.coinPayTotal,
		g.name,
		IFNULL(m.code,'') as  code,
		ifnull(m.freightTotal,0) as freightTotal,
		m.id as mainId
		FROM
		order_detail d
		LEFT JOIN base_wxgoods g ON g.id = d.goodsId
		LEFT JOIN order_main m ON m.id = d.orderId
		LEFT JOIN base_user u ON u.id = m.buyUserId
		WHERE
		d.id = #{id}
	</select>
</mapper>